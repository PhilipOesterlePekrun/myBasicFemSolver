2D linear static works -> Overarching things to do now: {

Features/capability:
- Gaussian Quadrature instead of trapezoidal integration
- Neumann BCs and body forces (and possibly even other BCs)
- Nonlinear (Green Lagrange E, 2nd Piola Kirchoff S), for which I also need Newton-Raphson
- A basic meshing algorithm for Tri3
- Dynamic inertia terms (and damping, probably just Rayleigh for now or like always lol)
- Other linear solvers like Conjugate Gradient (will help me learn those also)

- Output files (store the solution and be able to read it to visualize again)
- Input files (not super important for now)

- In all honesty, just use Trilinos/Kokkos when the time comes, rather than make the two following features on your own
  - LinAlg: CrsMatrix
  - LinAlg: More efficient/raw vectors and matrices and Array. Also, possibly option for statically sized variants (ptr wrappers basically) for efficiency

Visualization:
- Cleaner visualization (for triangles for example)
- Be able to switch time steps for static problems so from initial to deformed just like in paraview
- Possibly maybe store the linear solver steps so you can basically actually play back the linear solver iterations in the visualization (because that is cool)

- Discretized displacement, stress, strain, and property field options
- Subareas of UI space
- Mouse controls for zooming and panning and clicking buttons

Organization:
- Make a macro or something for Timers on or off and if they are off, they will super efficiently not do anything
- Move linear solvers and integration schemes outside of the classes they are in right now
- Clean debugging (print matrices and such through db::pr unless they should always be printed)
- ^ Relatedly, instead of pure debug on or off, maybe also do verbosity levels like Trilinos and such do
- Move things to .cpp when possible
- General base class for elements
- Turn all prints with std::cout into std::string functions which return string so it can then be printed and transformed in flexible ways later


Eventually:
- *Eventually* 3D. Will probably require OpenGL or something. Also my code is just not efficient enough for it let's be honest (unless I use Trilinos, Kokkos)
- Eventually simple topology optimization
- Eventually fluid simulations (try FDM, also try FEM and FVM)
- Eventually Other material models

}






















cmake_minimum_required(VERSION 3.25)

project(myBasicFemSolver)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)


# Collect all source files, excluding those starting with EXCLUDE
file(GLOB ALL_SRC_FILES "src/*.cpp" "src/*.hpp")

# Filter out files that start with "EXCLUDE"
set(SRC_FILES "")
foreach(file ${ALL_SRC_FILES})
    get_filename_component(fname ${file} NAME)
    if(NOT fname MATCHES "^EXCLUDE.*")
        list(APPEND SRC_FILES ${file})
    endif()
endforeach()

# Add the executable
add_executable(myBasicFemSolver ${SRC_FILES})


# Link myUtils
set(MYUTILS_DIR "$ENV{HOME}/util/myUtils_Base/install_myUtils")
include_directories(${MYUTILS_DIR}/include)
link_directories(${MYUTILS_DIR}/lib)
target_link_libraries(myBasicFemSolver ${MYUTILS_DIR}/lib/libmyUtils.a)

# Link SFML
set(CMAKE_PREFIX_PATH "$ENV{HOME}/misc/tpl/SFML_base/install_SFML")
find_package(SFML REQUIRED COMPONENTS System Window Graphics)

target_link_libraries(myBasicFemSolver
    sfml-system
    sfml-window
    sfml-graphics
)




